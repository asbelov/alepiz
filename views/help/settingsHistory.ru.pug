//
    Copyright © 2022. Alexander Belov. Contacts: <asbel@alepiz.com>
doctype
html(lang="ru" xml:lang="ru" xmlns="http://www.w3.org/1999/xhtml")
    head
        title Настройки системы обработки исторических данных history.json
        link(rel='stylesheet', href='/materialize-css/dist/css/materialize.css')
        link(rel='stylesheet', href='/material-design-icons/material-icons.css')
        meta(name="viewport" content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        meta(name="author" content="Alexander Belov &lt;asbel@alepiz.com&gt")
        script(src='/materialize-css/dist/js/materialize.js')
        script(src='/javascripts/help.js')
    body
        header
            div.row
                div.col.s12.m10.offset-m1
                    h1 Описание настроек для системы обработки исторических данных history.json
        main
            div.row
                div.col.s12.m10.offset-m1
                    h3 Описание сервиса
                    p.
                        Сервис обработки исторических данных запускается как отдельный процесс и принимает соединения
                        по TCP/IP. Сервис позволяет клиентам добавить данные в базу, сделать запрос на получение исторических
                        данных за требуемое время или получить необходимое количество данных. При запросе данных из базы можно
                        использовать различные функции обработки данных. Например, получить среднее значение, максимальное
                        или минимальное, получить значение по условию. Можно применять статистические функции или функции
                        предсказания. Все функции находятся в файле historyFunctions.js.
                    p.
                        Запись исторических данных всегда происходит через сервер. Получение исторических данных
                        может выполняться как через сервер, так и при обращении напрямую к файлам БД. При обращении
                        напрямую к файлам скорость получения данных будет выше и ресурсов будет использовано меньше.
                        Способ получения данных регулируется настройкой directAccessToDBFile.
                    p.
                        Объектом, для которого хранятся данные в системе обработки исторических данных является
                        счетчик, подключенный к определенному объекту в ALEPIZ.
                        Идентификатор каждого объекта в истории - это так называемый ObjectCounterID или OCID - поле id
                        из таблицы objectsCounters
                    p.
                        При добавлении новых данных они записываются в кэш, хранящийся в оперативной памяти. Объем
                        хранимых в памяти данных меняется динамически для каждого объекта. Он зависит от интенсивности
                        запросов на чтение данных для этого объекта и от количества запрашиваемых данных.
                        Работа с кэшем выполняется в historyCache.js
                    p.
                        Запись данных
                        из кэша в базу данных производится через определенные интервалы времени.
                        Запись и чтение данных
                        из файлового хранилища производится в файле historyStorageServer.js. В качестве файлового
                        хранилища используется база данных SQLite.
                    p.
                        Во время
                        записи данных в файловое хранилище формируются данные о трендах - усредненные значения за интервалы времени
                        в 10, 30 и 60 минут. Временные интервалы для трендов определены в переменной
                        const trendsTimeIntervals = [10, 30, 60] в файле historyStorage.js.
                        Тренды обычно хранятся дольше чем данные, занимают меньше места и позволяют быстро
                        получить усредненные данные из базы при запросе данных за большой период времени.
                    p.
                        Периодически происходит запуск специально функции - housekeeper. Она необходима для исторических
                        данных, трендов и кэша от записей, время хранения которых закончилось.
                        Время хранения данных определяется отдельно для каждого счетчика.
                        Это можно сделать через действие Counter settings с помощью установки параметров
                        Keep history и Keep trends.
                        Housekeeper запоминает идентификатор объекта на котором остановилась очистка данных и при
                        запуске ALEPIZ продолжает очистку с объекта, на котором он закончил очистку во время остановки.
                    p.
                        Кроме этого периодически запускается функция очистки истории от удаленных объектов. Функция
                        называется removeZombiesFromStorage() и удаляет объекты, данные и тренды для несуществующих
                        objectCounterID в ALEPIZ.
                    p.
                        Для резервирования исторической базы данных используется технология асинхронной репликации.
                        Во время сохранения данных из кэша, запись в различные базы данных выполняется из
                        нескольких потоков. Обычно настраивается два потока. Один для записи данных в основную базу
                        данных, другой - для записи в резервную.
                        Процесс ожидает запись только в первую настроенную базу данных, которая является основной.
                        В остальные базы данные пишутся без ожидания окончания записи для ускорения
                        сохранения и предотвращения блокировки при недоступности резервной базы данных.
                    p.
                        Процесс, обслуживающий систему обработки исторических данных запускает по одному потоку на
                        каждую базу данных для записи данных и по несколько потоков для запросов данных из базы.
                        Данные запрашиваются только из первой настроенной базы данных. При запросе данные будут получены
                        сначала из кэша. Если кэше недостаточно данных, происходит обращение к файловому хранилищу.
                    p.
                        Настройки по умолчанию находятся в файле historyParameters.js.
                    h3 Настройки
                    ul.browser-default
                        li localAddress - IP адрес к которому будет привязан сервер истории. По умолчанию 127.0.0.1.
                        li serverAddress - IP адрес, к которому будут подключаться клиенты. По умолчанию 127.0.0.1.
                        li.
                            serverPort - TCP порт, который будет слушать сервер и к которому будут подключаться клиенты.
                            По умолчанию 10163.
                        li.
                            maxSocketErrorsCnt - максимальное количество ошибок сокета, после которого сервер будет
                            остановлен. По умолчанию 500.
                        //li.
                            restartHistoryInterval - интервал времени в секундах, через который будет производится
                            рестарт сервиса обслуживания исторических данных. По умолчанию 0 - не перезапускать.

                        //li.
                            restartStorageModifier - (true|false) при рестарте перезапускать потоки, отвечающие за
                            запись в базу данных. По умолчанию false,
                        //li.
                            restartStorageQueryProcesses - (true|false) при рестарте перезапускать потоки, отвечающие за
                            запросы информации из базы данных. По умолчанию false,
                        //li.
                            restartHistory - (true|false) при рестарте выполнять полный перезапуск сервера обслуживания
                             исторических данных, как при остановке и запуске ALEPIZ. По умолчанию false.
                        li.
                            cacheServiceInterval - интервал времени в секундах для периодического запуска функции
                            обслуживания кэша. Во время обслуживания производится сохранение данных из кэша в
                            базу данных и формирование трендов. По умолчанию 300,
                        //li.
                            cacheServiceTimeout - максимальное время работы в миллисекундах для функции обслуживания
                            кэша, после чего будет предпринята попытка прекратить обслуживание в перерывах между
                            операциями записи данных. По умолчанию 0 - никогда не прерывать.
                        //li.
                            cacheServiceExitTimeout - функция обслуживания кэша запускается через определенный интервал
                            времени. Если предыдущее обслуживание не было завершено, новое обслуживание не начнется.
                            Если предыдущее обслуживание длится больше времени, чем указанное в этом параметре
                            в миллисекундах, то при повторном запуске функции обслуживания начнется обслуживание кэша
                            заново, не смотря на то, что предыдущее обслуживание еще не было завершено.
                            По умолчанию 0 - всегда дожидаться завершения обслуживания кэша.
                        //li.
                            cacheServiceTimeoutForSaveObjectRecords - максимальное время сохранения одной записи в
                            базу данных. Если запись сохраняется дольше, чем время, установленное в этом параметре, начинается
                            процесс сохранения следующей записи. По умолчанию 0 - всегда дожидаться сохранения записи.
                        //li.
                            timeoutForDeleteObjectRecords - максимальное время в течение которого может выполняться
                            удаление записей для одного объекта при выполнении операции очистки базы данных. По умолчанию 0 -
                            бесконечно.
                        //li.
                            timeoutForCommitTransaction - максимальное время в миллисекундах в течение которого может выполняться
                            операция завершения транзакции (commit transaction). По умолчанию 0 - бесконечно.
                        li.
                            initCachedRecords - количество кэшируемых записей для одного объекта при создании нового
                            объекта в сервисе обработки исторических данных. По умолчанию 5. Если не используется прямое
                            получение данных из БД, в дальнейшем, количество
                            кэшируемых может быть увеличено в зависимости от запросов данных для объекта. Если
                            количество запросов уменьшается, количество данных в кэше так же будет сокращаться,
                            но до значения, не меньше чем установленно в этом параметре.
                        li.
                            directAccessToDBFile - (true|false) при необходимости получить исторические данные из
                            БД, запросы на получение данных будут выполнятся напрямую к БД (true) или с использованием
                            сервиса обработки исторических данных (false). Прямое получение данных из БД обычно
                            позволяет увеличить скорость доступа к данным.
                            Исторические функции в этом случае обрабатывают данные не в
                            сервисе обработки исторических данных, а в функции, из которой выполняется запрос на
                            получение данных.
                            При прямом получении данных для каждого объекта кэшируется initCachedRecords данных.
                            По умолчанию true.
                        li.
                            queryMaxResultNumbers - возвращать за один запрос не более указанного количества
                            исторических данных при запросе числовых данных. По умолчанию 5000,
                        li.
                            queryMaxResultStrings - возвращать за один запрос не более указанного количества
                            исторических данных при запросе строковых данных. По умолчанию 50
                        li.
                            storageQueryingProcessesNum - количество потоков, для обслуживания запросов на получение
                            данных. По умолчанию 0 - количество потоков равно количеству ядер процессоров
                        li.
                            housekeeperInterval - интервал времени в миллисекундах для периодического запуска
                            housekeeper - системы очистки базы данных, трендов и кэша от исторических данных.
                            По умолчанию - 1800000 (30 минут)
                        //li.
                            housekeeperWaitTimeout - время ожидания housekeeper в миллисекундах.
                            Если за это время housekeeper не совершил ни одной новой операции по очистке или запущен
                            новый процесс очистки, а предыдущий не завершился за указанное время, housekeeper будет
                            перезапущен.
                        li.
                            housekeeperWatchdogCheckInterval - интервал времени в миллисекундах для проверки housekeeper, что он
                            выполняет действия по очистке базы данных. Если housekeeper запущен, каждый раз лог будет
                            выводится информация о текущей работе housekeeper. По умолчанию 300000.
                        li.
                            queriesMaxQueueLength - если количество запросов больше чем установленное значение в этом
                            параметре, будет выдано предупреждение в лог. По умолчанию 1000.
                        li.
                            slowQueueSec - Если запрос длился больше времени, указанном в этом параметра (в секундах),
                            в лог файл будет выведено предупреждение о долгом запросе. По умолчанию 15.
                        li.
                            dumpFileName - имя файла в который при остановке ALEPIZ будет сохраняться кэш. За счет
                            этого уменьшается время остановки ALEPIZ
                            и не теряются данные из кэша между остановкой и стартом. Файл находится в каталоге,
                            установленном в файле common.json, параметр tempDir. После запуска ALEPIZ данные из файла
                            загружаются обратно в кэш. После запуска ALEPIZ и выполнения первой операции по сохранению
                            данных из кэша в базу данных, файл с сохраненными данными удаляется.
                            По умолчанию unsavedData.json.
                        li.
                            db - массив объектов с описанием файлов баз данных, в которых хранятся исторические данные. Таких
                            файлов может быть несколько. Обычно настраивается два файла, для основной базы и ее резервной копии.
                            Первый файл является основной базой в которую производится синхронная запись данных. При запросах
                            исторических данных, информация извлекается только из первого файла.
                            Во второй и последующие файлы данные записываются асинхронно без ожидания окончания записи.
                            В запросах исторических данных эти файлы не участвуют.
                        ul.browser-default
                            li path - путь до базы данных. Например, DB или \\\\ALEPIZ-BCP\\d$\\ALEPIZ\\DB
                            li file - имя файла для базы данных, например history.db
                            li relative - (true|false) - является ли путь относительным (true) или абсолютным (false)
