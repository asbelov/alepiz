//
    Copyright © 2022. Alexander Belov. Contacts: <asbel@alepiz.com>
doctype
html(lang="ru" xml:lang="ru" xmlns="http://www.w3.org/1999/xhtml")
    head
        title Общие настройки common.json
        link(rel='stylesheet', href='/materialize-css/dist/css/materialize.css')
        link(rel='stylesheet', href='/material-design-icons/material-icons.css')
        meta(name="viewport" content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        meta(name="author" content="Alexander Belov &lt;asbel@alepiz.com&gt")
        script(src='/materialize-css/dist/js/materialize.js')
        script(src='/javascripts/help.js')
    body
        header
            div.row
                div.col.s12.m10.offset-m1
                    h1 Описание общих настроек common.json
        main
            div.row
                div.col.s12.m10.offset-m1
                    ul.browser-default
                        li serviceName - Имя сервиса Windows, используется при установке сервиса
                        li serviceDisplayName - Отображаемое имя сервиса Windows, используется при установке сервиса
                        li nodePath - полный путь до исполняемого файла nodejs, используется при установке сервиса
                        li.
                            maxMemSize - Объем памяти в мегабайтах при достижения процессом которого в exit.log будут
                            попадать сообщения о превышении установленного объема и будет предприниматься попытки
                            принудительной сборки мусора.
                            При изменениии значения параметра он будет перечитываться без необходимости перезапуска ALEPIZ.
                            Так же используется при установке сервиса и передается в качестве параметра nodejs
                            --max-old-space-size. По умолчанию 4096.
                        li.
                            criticalMemSize - Объем памяти в мегабайтах при достижения процессом которого в exit.log будут
                            попадать сообщения о превышении установленного объема, будет создан файл с программным
                            стеком и будет завершен процесс, у которого объем используемой памяти превысил данное
                            значение. По умолчанию 0 (не проверять).
                            При изменениии значения параметра он будет перечитываться без необходимости перезапуска ALEPIZ.
                        li.
                            writeHeapSnapshot - при достижении maxMemSize
                            записать снимок кучи (heap snapshot) в файл JSON. Имена файлов (для основного и
                            рабочих потоков) будут указаны в лог файле exit.log.
                            Формат имени файла: &apos;Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot&apos;
                            Снапшот будет записываться в файл не чаще чем раз в 30 минут.
                            При изменениии значения параметра он будет перечитываться без необходимости перезапуска ALEPIZ.
                            Этот файл предназначен для использования с такими инструментами, как Chrome DevTools.
                            Схема JSON недокументирована и специфична для ядра V8 и может меняться от одной версии V8
                            к другой.
                            Для создания моментального снимка кучи требуется память примерно в два раза больше размера
                            кучи на момент создания моментального снимка. Это приводит к риску завершения процесса.
                            Создание моментального снимка — это синхронная операция, которая блокирует цикл обработки
                            событий на время, зависящее от размера кучи.
                        li.
                            httpHeaderSize - Размер кучи в байтах, используется при установке сервиса и передается
                            в качестве параметра nodejs --max-http-header-size. По умолчанию 32767
                        li.
                            unauthorizedUser - имя пользователя, которое будет использоваться, если пользователь не
                            авторизовался в системе. Неавторизованному пользователю можно установить
                            необходимые права так же, как и авторизованному. По умолчанию guest
                        li.
                            systemUser - имя пользователя от которого запускаются действия из коллекторов и
                            при выполнении задач. Пользователь имеет максимальные привилегии и для увеличения
                            быстродействия для этого пользователя не производится проверка прав. По умолчанию system
                        li.
                            reloadRightsIntervalSec - интервал времени в секундах, через который будут перечитываться
                            права пользователей в кэш. Права пользователей кэшируются для увеличения быстродействия.
                            По умолчанию 180
                        li.
                            IPCClientMaxReconnectAttempts - максимальное количество неудачных попыток
                            подключений между компонентами, после достижения которого будет работа компоненты будет
                            завершена. Обычно после завершения компонента перезапускается. Если не установлено или 0,
                            то попытки переподключения будут продолжаться бесконечно.
                        li.
                            serviceStopTimeout - время ожидания остановки сервиса в миллисекундах, после которого
                            все процедуры, выполняемые при остановке, будут прерваны и сервис остановится принудительно.
                            По умолчанию 120000.
                        li.
                            tempDir - относительный путь до каталога с временными файлами.
                            По умолчанию temp. Если не существует, будет создан при запуске сервиса
                        li.
                            maxVarCalcDepth - Максимальное количество рекурсий, которое может быть использовано при
                            расчете значения переменной. Расчет выполняется последовательно, начиная с расчета
                            выражения Update event, которое используется для определения необходимости сбора
                            данных каунтером. Если в процессе расчета выражения найдена неопределенная переменная,
                            выполняется рекурсия и начинает рассчитываться значение неопределенной переменной.
                            По умолчанию таких рекурсий может быть не больше 20.
                            О том, что достигнут предел по количеству рекурсий можно судить по ошибке в логе:
                            "The maximum calculation depth (20) of the variable &lt;VARIABLENAME&gt; has been reached.
                            Perhaps the calculation of the variable is looped.." Необходимо проверить, нет ли
                            зацикливания при расчете переменной (когда вычисление двух переменных прямо или косвенно
                            зависят друг от друга так, что вычислить их невозможно).
                            Если зацикливания нет, то, возможно, необходимо оптимизировать
                            расчет переменной. Если оптимизация невозможна, можно увеличить значение этого параметра.