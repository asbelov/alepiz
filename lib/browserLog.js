/*
 * Copyright (C) 2018. Alexander Belov. Contacts: <asbel@alepiz.com>
 */

var log = require('../lib/log')(module);
var Conf = require('../lib/conf');
const confLog = new Conf('config/log.json');

var browserLog = {};
module.exports = browserLog;

// number of log messages, generated by client javascript in browser for each sessionID: {<sessionID>: <logRecordsCount>}
// If count of log records for session more than 'maxRecordsReturnedFromBrowserForOneSession' log.json parameter,
// then skip to record it
var countOfLogMessagesFromBrowser = new Map();

/*
 Receive log message from client (browser) and log it, using standard module audit

 level S|D|I|W|E - log level
 argsStr - stringify array of objects for log
 */
browserLog.log = function (level, argsStr, sessionID, callback){
    if(!argsStr || !level || (level !== 'S' && level !== 'D' && level !== 'I' && level !== 'W' && level !== 'E'))
        return callback(new Error('Browser request error: log arguments not specified or invalid'));

    //log.debug('Receiving log record from browser: level: ', level, ', args: ', argsStr);


    if(!countOfLogMessagesFromBrowser.has(sessionID)) countOfLogMessagesFromBrowser.set(sessionID, 1);
    else {
        var n = countOfLogMessagesFromBrowser.get(sessionID);
        countOfLogMessagesFromBrowser.set(sessionID, ++n);
    }

    if(countOfLogMessagesFromBrowser.has(sessionID) >
        (Number(confLog.get('maxRecordsReturnedFromBrowserForOneSession') || 50))) {
        return callback(new Error('Too many log messages received from the browser'));
    }

    try{
        var args = JSON.parse(argsStr);
    } catch(err){
        return callback(new Error('Can\'t parse log arguments received from browser: '+err.message));
    }

    log.raw(level, args, module);
    callback();
};

browserLog.deleteSession = function(sessionID){
    countOfLogMessagesFromBrowser.delete(sessionID);
};