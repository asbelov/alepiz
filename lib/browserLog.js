/*
 * Copyright (C) 2018. Alexander Belov. Contacts: <asbel@alepiz.com>
 */

var log = require('../lib/log')(module);
var conf = require('../lib/conf');

var browserLog = {};
module.exports = browserLog;

// count of log messages, generated by client javascript in browser for each sessionID: {<sessionID>: <logRecordsCount>}
// If count of log records for session more then 'log:maxRecordsReturnedFromBrowserForOneSession' conf.json parameter,
// then skip to record it
var countOfLogMessagesFromBrowser = {};

/*
 Receive log message from client (browser) and log it, using standard module audit

 level S|D|I|W|E - log level
 argsStr - stringify array of objects for log
 */
browserLog.log = function (level, argsStr, sessionID, callback){
    if(!argsStr || !level || (level !== 'S' && level !== 'D' && level !== 'I' && level !== 'W' && level !== 'E'))
        return callback(new Error('Error in log request from browser: log arguments are not specified or incorrect'));

    //log.debug('Receiving log record from browser: level: ', level, ', args: ', argsStr);


    if(!countOfLogMessagesFromBrowser[sessionID]) countOfLogMessagesFromBrowser[sessionID] = 1;
    else ++countOfLogMessagesFromBrowser[sessionID];

    if(countOfLogMessagesFromBrowser[sessionID] > Number(conf.get('log:maxRecordsReturnedFromBrowserForOneSession')))
        return callback(new Error('Counts of log message received from browser too mach'));

    try{
        var args = JSON.parse(argsStr);
    } catch(err){
        return callback(new Error('Can\'t parse log arguments, received from browser: '+err.message));
    }

    log.raw(level, args, module);
    callback();
};

browserLog.deleteSession = function(sessionID){
    delete(countOfLogMessagesFromBrowser[sessionID]);
};
