//
    Copyright © 2020. Alexander Belov. Contacts: <asbel@alepiz.com>
    Created on 2020-4-28 11:29:12
doctype
html(lang="ru" xml:lang="ru" xmlns="http://www.w3.org/1999/xhtml")
    head
        title Action editor: разработка нового действия. Документация по разработке
        link(rel='stylesheet', href='/materialize-css/dist/css/materialize.css')
        link(rel='stylesheet', href='/stylesheets/material-design-icons.css')
        meta(name="viewport" content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        meta(name="author" content="Alexander Belov &lt;asbel@alepiz.com&gt")
        script(src='/materialize-css/dist/js/materialize.js')
        script(src='/javascripts/help.js')
    body
        header
            div.row
                div.col.s12.m10.offset-m1
                    h1 Action editor
                    h5.light.
                        Позволяет создать новое или отредактировать существующее действие

        main
            div.row
                div.col.s12.m10.offset-m1
                    img(src="./images/help.main.png" width="1024").materialboxed.card-panel.hoverable

                    h2 Описание Action editor
                    p.
                        Action editor служит для создания нового или редактирования существующего действия. Для удобства
                        в Action Editor встроен редактор JavaScript и редактор шаблонов PUG. Action editor имеет все
                        необходимые средства для разработки действий и не требует установки дополнительных сред
                        разработки.

                    h5.
                        Возвращаемое значение: Action ID (имя папки, в которой расположено редактируемое действие)

                    h2 Описание интерфейса
                    h3 Вкладки
                    ol
                        li.
                            SERVER - вкладка позволяет установить основные параметры для действия и отредактировать или
                            создать код JavaScript, который служит для выполнения действия на стороне сервера
                        li.
                            AJAX - вкладка позволяет отредактировать или создать код JavaScript, который будет обслуживать
                            запросы на стороне сервера, необходимые для отображения интерфейса,
                            например с помощью технологии AJAX (Asynchronous Javascript And Xml).
                        li.
                            CLIENT - вкладка необходима для создания или редактирования кода JavaScript, который будет
                            запускаться в браузере и служит для формирования пользовательского интерфейса
                        li.
                            HOME PAGE - статическая часть пользовательского интерфейса. Для ее формирования
                            используется #[a(href="https://pugjs.org/" target="_blank") шаблонизатор PUG ],
                            который в дальнейшем, используя препроцессор, формирует
                            страницу в HTML
                        li.
                            CONFIGURATION - вкладка с настройками для действия в формате JSON
                        li.
                            HELP - редактор страниц помощи на различных языках. Для формирования страниц помощи так же
                            используется #[a(href="https://pugjs.org/" target="_blank") шаблонизатор PUG ],
                            который в дальнейшем, используя препроцессор формирует
                            страницы в HTML.

                    h3 Настройки действия на вкладке SERVER
                    img(src="./images/help.actionSetup.png" width="1024").materialboxed.card-panel.hoverable

                    h4 Select action
                    p Позволяет выбрать существующее действие из списка, либо создать новое действие.

                    h4 New action ID
                    p.
                        Если вы создаете новое действие, то его ID необходимо ввести в это поле. Action ID - это папка,
                        в которой хранятся файлы для действия. Если вы выбрали существующее действие, название
                        Action ID появится в этом поле.
                        Если изменить Action ID, папка с действием будет переименована.
                        Так же будут внесены изменения в расположение действий в файле конфигурации ALEPIZ.

                    h4 Select action group
                    p.
                        В этом поле отображается группа, в которой находится действие в системном
                        меню Actions. Можно изменить группу для действия. При изменении группы
                        будут внесены изменения в расположение действий в файле конфигурации ALEPIZ.
                        Группа будет удалена автоматически, если в ней не останется ни одного действия.
                        Если создается новое действие, необходимо выбрать группу, в котором действие будет отображаться
                        в системном меню Actions.

                    h4 New action group
                    p.
                        Если требуется создать новую группу, необходимо в это поле вести имя новой группы.
                        При этом будут внесены изменения в расположение действий в файле конфигурации ALEPIZ.

                    h4 Delete action
                    p При выборе этого элемента выбранное действие будет удалено из системы и из файла конфигурации ALEPIZ

                    h4 Reset
                    p Сбрасывает все настройки и шаблоны в редакторах к значениям по умолчанию для нового действия.

                    h3 Формирования файла помощи во вкладке HELP
                    img(src="./images/help.helpSetup.png" width="1024").materialboxed.card-panel.hoverable

                    h4 Help page language
                    p.
                        Можно выбрать страницу помощи для требуемого языка. При выборе нового языка,
                        все текущие изменения, сделанные на странице помощи, не сохраняются.
                        Если страницы помощи не существовало, в этом поле будет установлен
                        язык, используемый в браузере по умолчанию. Если существует страница помощи с языком,
                        используемым в браузере по умолчанию, она будет отображена в первую очередь.
                        Иначе отображается страница помощи на английском языке.
                        Если страницы помощи на языке, установленном в браузере и страницы помощи на английском языке
                        не существует, будет отображена первая попавшаяся страница помощи.

                    h4 Add new language
                    p.
                        Если в это поле добавить новый язык и нажать на кнопку "+", он будет добавлен в список языков.
                        Help page language. Затем можно создать страницу помощи на добавленном языке.

                    h2 Разработка нового действия
                    div.row
                        div.col.s12.m6.l7
                            p.
                                Действие состоит из нескольких стандартных компонент:
                            ul.browser-default
                                li index.pug - статическая страница пользовательского интерфейса
                                li static\client.js - JavaScript, используемый в пользовательском интерфейсе
                                li ajax.js - серверная часть для формирования пользовательского интерфейса
                                li server.js - исполняемый код на сервере, который запускается при запуске действия на исполнение
                                li config.json - файл с настройками действия
                                li help\index.ru.pug - статическая страница помощи с описанием действия
                            p.
                                В Action editor для всех перечисленных компонент сделаны шаблоны, используя которые
                                можно разработать собственное действие. В этом случае действие будет выглядеть в стиле интерфейса
                                системы ALEPIZ.
                        div.col.s12.m6.l5
                            img(src="./images/help.files.png").materialboxed.card-panel.hoverable
                    p.
                        Окно для отображения действия представляет собой iframe, в котором можно разместить
                        любую Web страницу или сделать ссылку на внешний ресурс.
                        Это может быть Web интерфейс управления устройством, например ILO от Hewlett Packard.
                        Так же можно создать действие самостоятельно.
                        Использование iframe позволяет избежать пересечения пространств имен HTML и JavaScript
                        основного интерфейса ALEPIZ и интерфейса разрабатываемого действия.
                    blockquote.
                        При проектировании нового действия необходимо придерживаться правила: функции,
                        которые выполняют изменения, определенные действием, должны находиться в файле
                        server.js. Файл ajax.js может только передавать в действие данные, необходимые для формирования
                        пользовательского интерфейса. Таким образом пользователь будет уверен, что до тех пор, пока он
                        не запустит действие на выполнение, не произойдут никакие изменения, определенные действием.

                    h4 Подключение дополнительных модулей nodejs
                    p.
                        Если требуется подключить внешний модуль nodejs, необходимо установить его в каталог
                        node_modules, который должен находится в корневом каталоге разрабатываемой компоненты.
                        Для этого можно воспользоваться утилитой npm и в корневом каталоге компоненты выполнить
                        следующие шаги:
                    ul.browser-default
                        li создать файл package.json вручную либо запустить npm init и ответить на вопросы.
                        li.
                            выполнить nmp i <имя модуля>. Появится каталог node_modules в который будет установлен
                            требуемый модуль
                    h4 index.pug - страница пользовательского интерфейса
                    p.
                        Для формирования статической страницы для пользовательского интерфейса используется
                        #[a(href="https://pugjs.org/" target="_blank") шаблонизатор PUG ], который, с помощью
                        препроцессора создает страницу HTML.
                        Чтобы быстро понять как работать с PUG приведем короткий текст из описания шаблонизатора:
                    div.card-panel
                        p.
                            В Pug нет закрывающих тегов, вместо этого он использует строгую табуляцию (или отступы)
                            для определения вложенности тегов.
                        pre.
                            Pug:
                            ul
                              li Item A
                              li Item B
                              li Item C
                        pre.
                            HTML:
                            &lt;ul&gt;
                              &lt;li&gt;Item A&lt;/li&gt;
                              &lt;li&gt;Item B&lt;/li&gt;
                              &lt;li&gt;Item C&lt;/li&gt;
                            &lt;/ul&gt;
                    p.
                        Никаких специальных требований к странице пользовательского интерфейса нет.
                        Для удобства, можно воспользоваться готовым шаблоном, предоставляемым Action editor.
                    p.
                        Интерфейс ALEPIZ создан с помощью фреймворка
                        #[a(href="https://materializecss.com/" target="_blank") materializecss]. Для того, чтобы все
                        компоненты системы выглядели в едином стиле и была возможность применения тем, необходимо использовать этот
                        же фреймворк при разработке действий.

                    h4 static\client.js - frontend скрипт
                    p.
                        Никаких специальных требований к скрипту для формирования пользовательского
                        интерфейса нет. В некоторых случаях такой скрипт вообще не требуется, например, если
                        пользовательский интерфейс действия не является динамическим. Для удобства, можно
                        воспользоваться готовым шаблоном, предоставляемым Action editor. Шаблон дополнительно подключает
                        фреймворк #[a(href="https://jquery.com/" target="_blank") jquery].
                        Если jquery не требуется, его можно отключить.
                    p.
                        Ниже представлен пример скрипта. После формирования пользовательского интерфейса
                        (запуск из функции $(function () {...}) он выводит в консоль параметры из файла конфигурации
                        действия и выбранные пользователем объекты.
                        Выполняет AJAX запрос к серверу и выводит его результат на консоль.
                        При изменении выбранных объектов, новый список будет выведен на консоль.
                        При выполнении действия на консоль будет выведены информационные сообщения до и после его выполнения.
                    div.card-panel
                        pre.
                            var JQueryNamespace = (function ($) {
                                $(function () {
                                    console.log('Action parameters: ', parameters);

                                    $.post(serverURL, {
                                            userParameterName1: 'value1',
                                            userParameterName2: 'value2'
                                        }, function(result) {

                                        console.log('Result from ajax: ', result);
                                    });
                                });
                            })(jQuery); // end of jQuery name space

                            function onChangeObjects(objects){
                                console.log('The list of selected objects has changed: ', objects);
                            }
                            function callbackBeforeExec(callback) {
                                console.log('The function is called before the action starts.');
                                callback();
                            }
                            function callbackAfterExec(callback) {
                                console.log('The function is called after the action starts.');
                                callback();
                            }

                    p.
                        В скрипте можно использовать параметры из файла конфигурации действия и
                        информацию о выбранных пользователем объектах.
                        Для преобразования этих данных к объекту JavaScript можно использовать следующую
                        конструкцию:
                    div.card-panel
                        pre.
                            var parameters = {
                                action: JSON.stringify(action),
                                objects: JSON.stringify(objects)
                            };
                    p.
                        Данные содержат следующую информацию:
                    ul.browser-default
                        li.
                            action: Системные и пользовательские параметры действия из файла конфигурации действия и,
                            дополнительно, параметры:
                        ul.browser-default
                            li actionID - каталог для действия
                            li link - ссылка на текущее действие с учетом идентификатора сессии
                            li sessionID - идентификатор пользовательской сессии
                        li.
                            objects: массив из объектов, выбранных при запуске действия.
                            Каждый объект массива содержит имя объекта и его идентификатор в базе данных в формате
                            [{id: &lt;Object ID1&gt;, name: &lt;Object Name1&gt;}, {id: &lt;Object ID2&gt;, name: &lt;Object Name2&gt;}, ...]
                    p.
                        Пример параметров, которые можно использовать в скрипте на стороне
                        браузера для действия Action editor:

                    div.card-panel
                        pre.
                            parameters: {
                                action: {
                                    actionID: "action_editor",
                                    ajaxServer: "ajax.js",
                                    onChangeObjectMenuEvent: "callback:onChangeObjects",
                                    callbackBeforeExec: "callbackBeforeExec",
                                    callbackAfterExec: "callbackAfterExec",
                                    cleanInputIDs: "deleteAction",
                                    description: "Create new or edit existing action",
                                    homePage: "index",
                                    icon: "directions_run",
                                    launcher: "nodeModule",
                                    launcherPrms: {
                                            javaScript: "server.js"
                                        },
                                    link: "/actions/action_editor_158947905273636",
                                    name: "Action editor",
                                    outputFormat: "text",
                                    sessionID: 158947905273636,
                                    showWhenNoObjectsSelected: true,
                                    staticDir: "static",
                                    timeout: 60
                                },
                                objects: [{
                                        id: 1,
                                        name: "Servers"
                                    },{
                                        id: 2,
                                        name: "ALEPIZ"
                                    }
                                ]
                            }
                    p.
                        В настройках действия можно определить несколько функций, которые будут вызываться на клиенте
                        при выполнении различных манипуляций в системе:
                    ul.browser-default
                        li.
                            onChangeObjectMenuEvent: Если пользователь выбирает какие-то объекты, при каждом сделанном
                            изменении
                            система будет попытаться запустить функцию с именем, которое указано в качестве
                            значения данного параметра. В качестве параметра функции будет передан массив с объектами, которые
                            выбраны пользователем. В примере выше будет вызвана функция onChangeObjects(objects) { ...}.
                            Значение "callback:" перед названием функции означает, что необходимо запустить функцию. Еще
                            один вариант значения для этого параметра может быть "fullreload". Он означает, что
                            при изменении выбранных объектов необходимо запустить формирование интерфейса действия заново.
                        li.
                            callbackBeforeExec: Если установлен этот параметр, то перед запуском действия система будет
                            пытаться запустить функцию с именем, которое указано в качестве значения данного параметра.
                            В качестве параметра функции будет передана функция callback. Если функция callback будет
                            запущена без параметров, действие начнет выполнятся. Если в качестве аргумента функции
                            callback будет передан объект Error [ callback(new Error('Can\'t run action')) ], то действие
                            не будет выполнено и пользователь увидит текст ошибки. Таким образом, например, можно
                            проверять корректность заполнения полей, либо формировать дополнительные параметры до того,
                            как они будут переданы на сервер, либо выводить пользователю какие-то интерактивные
                            предупреждения, с помощью которых он сможет остановить выполнение действия.
                            В примере выше будет вызвана функция callbackBeforeExec(callback) { ...}.
                        li.
                            callbackAfterExec: Если установлен этот параметр, то после завершения выполнения действия
                            система будет пытаться запустить
                            функцию с именем, которое указано в качестве значения данного параметра.
                            В качестве параметра функции будет передана функция callback.
                            Если в качестве аргумента функции callback будет передан объект Error
                            [ callback(new Error('Can\'t run action')) ], то пользователь увидит текст ошибки.
                            В примере выше будет вызвана функция callbackAfterExec(callback) { ...}
                        li.
                            cleanInputIDs: В качестве параметра можно перечислить через запятую идентификаторы
                            элементов пользовательского интерфейса. После выполнения действия их значение будет
                            обнулено.
                            В примере выже будет обнулено значение для элемента пользовательского интерфейса с
                            идентификатором "deleteAction":
                            &lt;input type=&quot;checkbox&quot; disabled=&quot;&quot; id=&quot;deleteAction&quot;&gt;
                    p.
                        Для сохранения параметров действия в адресную строку браузера и получения этих параметров существуют
                        функции getActionParametersFromBrowserURL() и setActionParametersFromBrowserURL():
                    ul.browser-default
                        li.
                            getActionParametersFromBrowserURL(callback), где callback является функцией и
                            получает массив actionParameters, состоящий из объектов, типа:
                            [{key: &lt;param1&gt;, val: &lt;value1&gt;}, {key: &lt;param2&gt;, val: &lt;value2&gt;}, .... {}, ...].
                            param это название параметра, а value - его значение.
                        li.
                            setActionParametersFromBrowserURL(actionParameters), где actionParameters это массив, состоящий
                            из объектов, типа:
                            [{key: &lt;param1&gt;, val: &lt;value1&gt;}, {key: &lt;param2&gt;, val: &lt;value2&gt;}, .... {}, ...].
                            param это название параметра, а value - его значение.
                    p.
                        В примере ниже записываем параметры действия param1=value1 и param2=value2 в адресную строку, затем
                        считываем их и печатаем в консоль браузера.
                    div.card-panel
                        pre.
                            // set parameters
                            setActionParametersToBrowserURL([{
                                    key: 'param1',
                                    val: 'value1'
                                }, {
                                    key: 'param2',
                                    val: 'value2'
                                }
                            ]);

                            // get parameters
                            getActionParametersFromBrowserURL(function(actionParametersFromURL) {
                                actionParametersFromURL.forEach(function(param) {
                                    console.log("Parameters: ", param.key, "=", param.val);
                                }
                            });
                    h4 ajax.js - backend скрипт
                    p.
                        Компонент служит для передачи данных с сервера в браузер по протоколу AJAX.
                        Для разработки компонента необходимо использовать nodejs.
                        Для удобства разработки сам протокол экранирован от разработчика.
                        Для получения параметров от клиента служит объект args. Некоторые параметры передаются
                        системой.
                    div.card-panel
                        pre.
                            {
                                actionName: &lt;Название действия&gt;,
                                actionID: &lt;Название каталога, в котором находится действие&gt;,
                                username: &lt;Имя пользователя, под которым запущено действие&gt;,

                                userParameterName1: "value1",
                                userParameterName2: "value2",
                                ....
                            }
                    p.
                        Значение, возвращаемое callback функцией будет передано в браузер во frontend скрипт.
                        В некоторых случаях использование компонента ajax.js не требуется. Например, если нет необходимости в
                        передаче каких-то данных с сервера на клиента для формирования пользовательского интерфейса.
                    p.
                        В примере ниже скрипт получает параметры от клиентского скрипта и возвращает их же обратно
                        через функцию callback
                    div.card-panel
                        pre.
                            var log = require('../../lib/log')(module);

                            module.exports = function(args, callback) {
                                log.debug('Starting ajax ' + __filename + ' with parameters', args);

                                // return all received parameters back to the client
                                callback(null, args);
                            };

                    h4 server.js - исполняемый код действия
                    p.
                        Компонент является исполняемым кодом для действия, который будет запущен после запуска действия.
                        Для разработки компонента необходимо использовать nodejs.
                        Для удобства разработки протокол передачи параметров экранирован от разработчика.
                        Для получения параметров от клиента служит объект args. В этот объект попадают все значения
                        интерактивных элементов пользовательского интерфейса HTML, которые имеют атрибут id или name.
                        Например:
                    div.card-panel
                        pre.
                            &lt;input type=&quot;text&quot; name=&quot;userParameterName1&quot; value=&quot;value1&quot;/&gt;
                            &lt;input type=&quot;textarea&quot; id=&quot;userParameterName2&quot;&gt;value12&lt;/textarea&gt;
                    p.
                        Некоторые параметры передаются системой.
                    div.card-panel
                        pre.
                            {
                                actionName: &lt;Название действия&gt;,
                                actionID: &lt;Название каталога, в котором находится действие&gt;,
                                username: &lt;Имя пользователя, под которым запущено действие&gt;,

                                userParameterName1: "value1",
                                userParameterName2: "value2",
                                ....
                            }
                    p.
                        Значение, возвращаемое функцией callback будет значением, которое возвращает действие.
                        Его можно будет использовать в задачах.
                        В некоторых случаях компонент server.js не требуется. Например, в случае, если действие
                        предназначено только для отображения информации.
                    p.
                        Пример server.js, где он возвращает в
                        качестве результата действия выбранные пользователем объекты или ошибку, если никакие
                        объекты выбраны не были.
                    div.card-panel
                        pre.
                            var log = require('../../lib/log')(module);

                            module.exports = function(args, callback) {
                                log.debug('Starting action server "', args.actionName, '" with parameters', args);

                                if(!args.o) return callback(new Error('Objects are not selected'));
                                callback(null, args.o);
                            }

                    h4 config.json - настройки действия
                    p.
                        Перечисленные ниже параметры используются системой для формирования и работы действия. Можно
                        дополнить конфигурацию своими параметрами. Они будут доступны в скрипте для формирования
                        пользовательского интерфейса, который запускается со стороны браузера так же, как и остальные
                        параметры действия.
                    ul.browser-default
                        li name - Название действия, которое отображается в различных элементах интерфейса для выбора действия
                        li description - Описание действия, появляется при наведении курсора на действие в системном меню Action
                        li.
                            icon - иконка для действия, отображаемая в задачах. Выбрать иконку можно на
                            #[a(href="https://material.io/resources/icons/" target="_blank") https://material.io/resources/icons/].
                        li homePage - имя файла без расширения в котором находится статическая часть пользовательского интерфейса
                        li launcher - название лаунчера из списка доступных лаунчеров, который используется для выполнения действия
                        li.
                            launcherPrms - параметры, которые будут переданы лаунчеру при выполнении действия.
                            Для лаунчеров есть страницы помощи, где описаны их параметры
                        li.
                            ajaxServer - файл, в котором находится код серверной части действия, отвечающего за
                            формирование пользовательского интерфейса.
                        li.
                            staticDir - каталог, в котором расположены статические файлы, используемые действием.
                            Обычно это скрипт для формирования пользовательского интерфейса, который запускается
                            на стороне браузера
                        li execMethod - метод выполнения для лаунчера. Может быть или POST или GET
                        li.
                            onChangeObjectMenuEvent: Если пользователь выбирает какие-то объекты, при каждом сделанном
                            изменении
                            система будет попытаться запустить функцию с именем, которое указано в качестве
                            значения данного параметра. В качестве параметра функции будет передан массив с объектами, которые
                            выбраны пользователем. В примере выше будет вызвана функция onChangeObjects(objects) { ...}.
                            Значение "callback:" перед названием функции означает, что необходимо запустить функцию. Еще
                            один вариант значения для этого параметра может быть "fullreload". Он означает, что
                            при изменении выбранных объектов необходимо запустить формирование интерфейса действия заново.
                        li.
                            callbackBeforeExec: Если установлен этот параметр, то перед запуском действия система будет
                            пытаться запустить функцию с именем, которое указано в качестве значения данного параметра.
                            В качестве параметра функции будет передана функция callback. Если функция callback будет
                            запущена без параметров, действие начнет выполнятся. Если в качестве аргумента функции
                            callback будет передан объект Error [ callback(new Error('Can\'t run action')) ], то действие
                            не будет выполнено и пользователь увидит текст ошибки. Таким образом, например, можно
                            проверять корректность заполнения полей, либо формировать дополнительные параметры до того,
                            как они будут переданы на сервер, либо выводить пользователю какие-то интерактивные
                            предупреждения, с помощью которых он сможет остановить выполнение действия.
                            В примере выше будет вызвана функция callbackBeforeExec(callback) { ...}.
                        li.
                            callbackAfterExec: Если установлен этот параметр, то после завершения выполнения действия
                            система будет пытаться запустить
                            функцию с именем, которое указано в качестве значения данного параметра.
                            В качестве параметра функции будет передана функция callback.
                            Если в качестве аргумента функции callback будет передан объект Error
                            [ callback(new Error('Can\'t run action')) ], то пользователь увидит текст ошибки.
                            В примере выше будет вызвана функция callbackAfterExec(callback) { ...}
                        li.
                            cleanInputIDs: В качестве параметра можно перечислить через запятую идентификаторы
                            элементов пользовательского интерфейса. После выполнения действия их значение будет
                            обнулено.
                            В примере выше будет обнулено значение для элемента пользовательского интерфейса с
                            идентификатором "deleteAction":
                            &lt;input type=&quot;checkbox&quot; disabled=&quot;&quot; id=&quot;deleteAction&quot;&gt;
                        li timeout - время ожидания выполнения действия со стороны браузера в секундах.
                        li.
                            showWhenNoObjectsSelected - (true|false) отображать или не отображать действие, если не
                            выбрано ни одного объекта.
                        li.
                            dontShowForObjectsWithProperties - Перечисленные через запятую или точку с запятой имена
                            свойств объектов, для которых не нужно отображать действие.
                            Сравнение не чувствительно к регистру символов. Проверка выполняется перед проверками
                            параметров
                            dontShowForObjects, showOnlyForObjects, dontShowForObjectsInGroups и
                            showOnlyForObjectsInGroups.
                        li.
                            showOnlyForObjectsWithProperties - Перечисленные через запятую или точку с запятой имена
                            свойств объектов, для которых нужно отображать действие. Для остальных объектов
                            действие отображаться не будет.
                            Сравнение не чувствительно к регистру символов. Проверка выполняется перед проверками
                            параметров
                            dontShowForObjects, showOnlyForObjects, dontShowForObjectsInGroups и
                            showOnlyForObjectsInGroups.
                            Проверка не выполняется, если установлен параметр dontShowForObjectsWithProperties.
                        li.
                            dontShowForObjects - Перечисленные через запятую или точку с запятой имена объектов для
                            которых не нужно отображать действие. Сравнение не
                            чувствительно к регистру символов.
                            Если установлен этот параметр, то параметры dontShowForObjectsInGroups,
                            showOnlyForObjects и showOnlyForObjectsInGroups проверятся не будут.
                        li.
                            showOnlyForObjects - Перечисленные через запятую или точку с запятой имена объектов,
                            для которых нужно отображать действие. Для остальных объектов действие отображаться не
                            будет.
                            Сравнение не чувствительно к регистру символов.
                            Если установлен параметр dontShowForObjects или showOnlyForObjectsInGroups, проверка по данному параметру
                            выполнятся не будет.
                        li.
                            dontShowForObjectsInGroups - Перечисленные через запятую или точку с запятой имена групп
                            объектов, для которых не нужно отображать действие для всех включенных в эти группы объектов.
                            Сравнение не чувствительно к регистру символов. При этом для самих групп действие будет
                            доступно.
                            Если установлен параметр dontShowForObjects, проверка по данному параметру
                            выполнятся не будет.
                            Если выбранные объекты не входят в перечисленные в параметре группы, то будет выполнена
                            проверка на соответствие параметрам showOnlyForObjectsInGroups и showOnlyForObjects.
                        li.
                            showOnlyForObjectsInGroups - Перечисленные через запятую или точку с запятой имена групп
                            объектов, для которых нужно отображать действие для всех включенных в эти группы объектов.
                            Для объектов, не включенных в перечисленные группы и для самих групп действие отображаться не будет.
                            Сравнение не чувствительно к регистру символов.
                            Если установлен параметр dontShowForObjects, проверка по данному параметру
                            выполнятся не будет.
                        li.
                            canAddParametersToAction - (true|false) Можно ли в задаче добавить дополнительные параметры действию.
                        li.
                            descriptionTemplate - Шаблон, который используется чтобы вывести понятное для восприятия
                            человеком сообщение о том, что именно будет сделано после выполнения действия с учетом
                            введенных параметров. Сформированный текст будет отображен в задаче при просмотре действий
                            и в тексте email, описывающим задачу. Ниже приведено описание, как пользоваться данных шаблоном.
                        li.
                            descriptionTemplateHTML - То же самое, что и descriptionTemplate, только в формате HTML.
                            Если не указано, то descriptionTemplateHTML принимает значение descriptionTemplate, в котором
                            заменяются символы перевода строки "\n" на HTML тэг "&lt;br/&gt;".
                        li.
                            parameters: {} объект, описывающий элементы интерфейса - параметры действия. Результат используется в
                            задаче при отображении параметров действия для их редактирования, чтобы администратору было
                            проще понимать, для чего предназначен тот или иной параметр. Ниже приведено описание объекта.
                    h5 Шаблон descriptionTemplate и descriptionTemplateHTML
                    p.
                        Шаблон служит для формирования описания действия в понятном человеку формате.
                        Описание будет отображаться при просмотре действий в задаче и в тексте email.
                        Для формирования шаблона можно использовать значения параметров и условия. Шаблон может содержать:
                    ul.browser-default
                        li Строки, которые будут отображены в неизменном виде.
                        li.
                            Переменные, которые будут заменены на значения соответствующих параметров действия.
                            Названия переменных должны соответствовать атрибуту id или name соответствующего элемента.
                            Формат записи переменной: %:&lt;Переменная&gt;:%. Например для параметра
                            &lt;input type=&quot;text&quot; id=&quot;objectsDescription&quot;/&gt; имя переменной
                            будет %:objectsDescription:%.
                        li.
                            Условия в формате:
                            {{&lt;Условие&gt; ?? &lt;Строка если условие выполнено&gt; :: &lt;Строка если условие не выполнено&gt;}}
                            служит для создания ветвления в описании действия в зависимости от значения той или иной переменной.
                            Интерполяция условий (включение одного условия в другое) не поддерживается.
                        ul.browser-default
                            li &lt;Условие&gt; может быть следующим:
                            ul.browser-default
                                li %:&lt;Переменная&gt;:%: проверяется, является ли не пустым значение переменной
                                li.
                                    %:&lt;Переменная&gt;:% == &lt;строка&gt;: проверяется совпадение значения
                                    переменной со строкой, указанной в условии без учета регистра символов
                                li.
                                    %:&lt;Переменная&gt;:% ~~ &lt;строка&gt;: проверяется, содержит ли значение
                                    переменной строку, указанную в условии без учета регистра символов
                            li.
                                &lt;Строка если условие выполнено&gt; - если условие выполнено,
                                в текст будет подставлена эта строка.
                                Может быть пусто тогда в текст ничего не будет подставлено
                            li.
                                &lt;Строка если условие не выполнено&gt; - если условие не выполнено,
                                в текст будет подставлена эта строка.
                                Может быть пусто тогда в текст ничего не будет подставлено
                        li.
                            Условия в формате:
                            {{&lt;Условие с повторяющимися переменными&gt; :: &lt;Строка для соединения&gt; :: &lt;Строка если переменная не определена&gt;}}
                            служит для создания описания для переменных, в имени которых может присутствовать изменяемый
                            индекс или индексы. Условие объединяет переменные с одинаковыми индексами в одну строку и
                            соединяет строки с помощью &lt;Строка для соединения&gt;. Если одна из переменных оказывается
                            неопределенна, вместо нее подставляется значение &lt;Строка если переменная не определена&gt;.
                            Интерполяция условий (включение одного условия в другое) не поддерживается.
                            Например, для условия {{name: prop*name, value: prop*val:: and ::""} и переменных
                            prop1name: PROP1, prop1val: PROP_1_VAL, prop3name: PROP3, propQname: PROP_Q, propQval: PROP_Q_VAL
                            будет сформировано описание: "name: PROP1, value: PROP_1_VAL and name: PROP3, value: "" and
                            name: PROP_Q, value: PROP_Q_VAL"
                        ul.browser-default
                            li.
                                &lt;Условие с повторяющимися переменными&gt - строка, содержащая переменные с индексами.
                                В качестве индекса может быть ноль или какое-то количество любых символов.
                                В имени переменной индексы обозначаются символом "*".
                            li.
                                &lt;Строка для соединения&gt - строка, соединяющая условия. Если в результате будет
                                получена только одна строка, строка для соединения использована не будет.
                            li.
                                &lt;Строка если переменная не определена&gt; - строка будет подставлена в условие если одна из
                                переменных с требуемым индексом неопределенна.

                    h6 Пример шаблона:
                    p.
                        "New properties will be set for "%:o:%". All other properties will {{%:deleteOtherProperties:% == 1 ?? :: not}} be deleted. New properties: {{name: "%:property*name:%", value: "%:property*value:%", description: "%:property*description:%", mode "%:property*mode:%":: and ::""}}.",
                    h6  Пример текста, сформированного из шаблона выше для действия по созданию нового объекта (Objects creator):
                    img(src="./images/help.actionDescriptionInTask.png" width="1024").materialboxed.card-panel.hoverable

                    h5 Описание параметров действия в объекте parameters
                    p объект parameters формируется как показано в примере ниже:
                    div.card-panel
                        pre.
                            parameters: {
                                &lt;parameterName1&gt;: {
                                    description: &lt;Parameter description&gt;
                                    canBeDeleted: &lt;true|false&gt;
                                },
                                &lt;parameterName1&gt;: {
                                    description: &lt;Parameter description&gt;
                                    canBeDeleted: &lt;true|false&gt;
                                },
                            ....
                            }
                    ul.browser-default
                        li.
                            &lt;parameterName1&gt; - имя параметра (аттрибут id или name у элементов в web странице,
                            который в дальнейшем будет передан в исполняемый код действия как параметр). В именах
                            параметров допускается использование шаблона "*", который обозначает ноль или больше
                            символов. Это может быть полезно для параметров, в имени которых содержатся индексы.
                            Например, для параметров "property1name, property2name, property3name, ..." можно сделать шаблон
                            "property*name"
                        li description - Описание параметра
                        li canBeDeleted - может ли параметр быть удален при редактировании действия в задаче
                    p.
                        На скриншоте ниже показано, как будет выглядеть описание действия и
                        описание для параметров действия Objects creator для следующей конфигурации:
                    div.card-panel
                        pre.
                            "descriptionTemplate": "New properties will be set for \"%:o:%\". All other properties will {{%:deleteOtherProperties:% == 0 ?? not ::}} be deleted. New properties: {{name: \"%:property*name:%\", value: \"%:property*value:%\", description: \"%:property*description:%\", mode \"%:property*mode:%\":: and ::\"\"}}.",
                            "parameters": {
                                "o": {
                                    "description": "Edited objects"
                                },
                                "deleteOtherProperties": {
                                    "description": "All other properties will be deleted (when not 0)"
                                },
                                "property*name": {
                                    "description": "Property name",
                                    "canBeDeleted": true
                                },
                                "property*value": {
                                    "description": "Property value or expression",
                                    "canBeDeleted": true
                                },
                                "property*description": {
                                    "description": "Property description",
                                    "canBeDeleted": true
                                },
                                "property*mode": {
                                    "description": "Property mode",
                                    "canBeDeleted": true
                                }
                            }


                    img(src="./images/help.actionParametersInTask.png" width="1024").materialboxed.card-panel.hoverable
                    h4 help\index.ru.pug - страница помощи с описанием действия
                    p.
                        Для формирования страниц помощи используется
                        #[a(href="https://pugjs.org/" target="_blank") шаблонизатор PUG ], который, используя
                        препроцессор, формирует HTML страницу.
                        Никаких специальных требований к странице помощи нет.
                        Для того, чтобы все компоненты интерфейса ALEPIZ были созданы в одном стиле, желательно
                        использовать готовый шаблон, предоставляемый Action editor и
                        элементы фреймворка #[a(href="https://materializecss.com/" target="_blank") materializecss].
                    p.
                        Скрипт help.js, включенный в шаблон страницы помощи, автоматически сформирует оглавление документа из
                        заголовков,
                        добавит нижний колонтитул с информацией о copyright и плавающий элемент слева для перехода к
                        верхней части страницы:
                    ul.browser-default
                        li Оглавление добавляется в первый элемент на странице с классом offset-m1
                        li Нижний колонтитул будет добавлен в элемент с тегом body
                        li.
                            copyright формируется из элемента meta("author"), например
                            meta(name=&quot;author&quot; content=&quot;Alexander Belov &lt;asbel@alepiz.com&gt;&quot;)
                            добавит соответствующий copyright и ссылку для составления почтового сообщения.
                            Год формируется из document.lastModified || document.lastModifiedDate
                        li плавающий элемент слева для перехода к верхней части страницы будет добавлен в элемент с тегом main


