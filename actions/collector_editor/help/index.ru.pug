//
    Copyright © 2020. Alexander Belov. Contacts: <asbel@alepiz.com>
    Created on 2020-4-29 10:22:12
doctype
html(lang="ru" xml:lang="ru" xmlns="http://www.w3.org/1999/xhtml")
    head
        title Collector editor: разработка нового сборщика. Документация по разработке
        link(rel='stylesheet', href='/materialize-css/dist/css/materialize.css')
        link(rel='stylesheet', href='/stylesheets/material-design-icons.css')
        meta(name="viewport" content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        meta(name="author" content="Alexander Belov &lt;asbel@alepiz.com&gt")
        script(src='/materialize-css/dist/js/materialize.js')
        script(src='/javascripts/help.js')
    body
        header
            div.row
                div.col.s12.m10.offset-m1
                    h1 Collector editor
                    h5.light.
                        Позволяет создать или отредактировать настройки и код сборщика данных

        main
            div.row
                div.col.s12.m10.offset-m1
                    img(src="./images/help.main.png" width="1024").materialboxed.card-panel.hoverable

                    h2 Описание Collector editor
                    p.
                        Collector editor служит для создания нового или редактирования существующего сборщика. Для удобства
                        в Collector Editor встроен редактор JavaScript и редактор шаблонов PUG. Collector editor имеет все
                        необходимые средства для разработки сборщика и не требует установки дополнительных сред
                        разработки.

                    h5.
                        Возвращаемое значение: Collector ID (имя папки, в которой расположен редактируемый сборщик)

                    h2 Описание интерфейса
                    h3 Вкладки
                    ol
                        li Settings - Настройки сборщика и его параметров
                        li.
                            Collector code - Редактор JavaScript исполняемого кода сборщика. Код будет исполняться при вызове сборщика
                            сервером для получения или генерации данных
                        li.
                            Help page - редактор страниц помощи на различных языках. Для формирования страниц помощи так же
                            используется шаблонизатор PUG, который в дальнейшем, используя препроцессор формирует
                            страницы в HTML.

                    h3 Settings
                    h4 Основные настройки
                    img(src="./images/help.mainSettings.png" width="1024").materialboxed.card-panel.hoverable

                    h4 Select collector
                    p Позволяет выбрать сборщик для редактирования или создать новый (если выбрать New collector)

                    h4 Collector ID
                    p.
                        Collector ID для нового сборщика. Collector ID - это папка, в которой находятся файлы
                        сборщика.

                    h4 Collector name
                    p.
                        Имя сборщика, которое отображается в списке Select collector и в действии Counter settings.

                    h4 Run collector separately
                    p.
                        Запрещает сбор данных для связанных со сборщиком пары объект-счетчик более одного раза в один
                        промежуток времени. То есть, если одновременно произошло несколько событий, от которых зависит
                        счетчик, использующий такой сборщик, то сбор или генерация данных для каждого подключенного к
                        счетчику объекта будет выполнена только один раз в один промежуток времени, не зависимо от
                        количества событий, произошедших в это время.

                    h4 Active collector
                    p.
                        Особенность работы активного сборщика заключается в том, что система запускает его как отдельный
                        процесс и сборщик сам инициирует сбор или генерацию данных по какому-то своему
                        алгоритму. Для сбора или генерации данных с такого сборщика не требуется устанавливать
                        зависимости от других счетчиков. Счетчики, основанные на таких сборщиках, обычно запускаются
                        на старте системы, и далее собирают и передают данные в систему самостоятельно.
                        Например, таким сборщиком может быть таймер, который
                        через заданные интервалы времени отправляет системе какие-то значения, а система, при получении
                        от него данных, запускает другие, зависимые от таймера счетчики.
                        Или это может быть ping, который через интервалы времени сам генерирует и отправляет пакеты и
                        возвращает в систему информацию об их времени прохождения.

                    h4 Separate collector
                    p.
                        Используется для пассивного типа сборщиков (когда сбор данных происходит по инициативе сервера
                        ALEPIZ). Обычно код сборщика встраивается в дочерние процессы сервера и, при необходимости
                        сбора данных, исполняется как код сервера. Если включить Run collector separately,
                        сервер запустит отдельный процесс с кодом сборщика и дочерние процессы будут обращаться к нему.
                        В случае встраивания одновременно может работать несколько копий сборщиков. При это они все
                        будут частью сервера, что может привести  к дополнительной нагрузке на сервер, если код сборщика
                        требует каких-то ресурсов ресурсов.
                        В случае выделения сборщика в отдельный процесс, будет выполняться только одна копия сборщика,
                        при этом не занимая вычислительные и другие ресурсы сервера. Ресурсы сервера будут
                        использоваться только для процесса обмена данными со сборщиком. Так же запуск пассивного сборщика
                        в отдельном процессе может потребоваться, если сборщику необходимо хранить свои какие-то состояния.

                    h4 Delete collector
                    p Выбранный счетчик будет удален из системы.

                    h4 Restart server
                    p.
                        После выполнения действия по созданию или модификации счетчика будет выполнен рестарт сервера,
                        чтобы выполненные изменения были применены системой.

                    h4 Collector description
                    p.
                        Описание для счетчика, которое будет появляться в качестве подсказки при выборе счетчика в
                        Counter settings

                    h3 Настройка параметров сборщика
                    p.
                        Параметры сборщика можно добавлять или удалять. Все они отображаются в Counter settings во время
                        модификации или создания нового счетчика при выборе сборщика для счетчика.
                        Значения параметров передаются в сборщик при выполнении кода сборщика системой.
                    p Для того, чтобы добавить новый параметр, нужно нажать на кнопку "+" под параметрами.
                    p Для удаления параметра нужно нажать на "x" слева сверху формы ввода свойств параметра
                    p Для изменения порядка перетащите форму ввода свойств параметра на требуемую позицию
                    img(src="./images/help.parameters.png" width="1024").materialboxed.card-panel.hoverable

                    h4 Parameter name
                    p.
                        Имя параметра, которое, вместе со значением, передается в счетчик

                    h4 Parameter description
                    p.
                        Описание параметра будет отображено в качестве заголовка для поля ввода параметра в
                        Counter settings

                    h4 Can be empty
                    p.
                        Указывает, может ли значение параметра быть пустым, при настройке счетчика в Counter settings.
                        Если значение параметра не может быть пустым, счетчик с пустым полем создать не получится.

                    h4 Default value
                    p.
                        Значение параметра по умолчанию. Если установлено то в поле значения параметра в Counter settings
                        будет подставляться это значение

                    h4 Check parameter as
                    p.
                        Несколько шаблонов для проверки корректности ввода значения параметра в Counter settings. Если
                        проверка установлена и значение параметра не соответствует шаблону, при сохранении счетчика будет
                        выведена ошибка.
                    img(src="./images/help.parametersCheck.png").materialboxed.card-panel.hoverable
                    p Могут использоваться следующие шаблоны для проверки:
                    ol
                        li Without checking - проверка значения не будет производится
                        li Integer number - проверка соответствия целому числу
                        li Float number - проверка соответствия числу с плавающей точкой
                        li.
                            Internet host name or IPv6\4 address - проверка, что значение параметра - это стандартное
                            доменное имя хоста или IP адрес v4 или v6
                        li TCP port (number) - проверка, что значение параметра - это стандартный порт протокола TCP

                    h4 Input type
                    img(src="./images/help.inputType.png").materialboxed.card-panel.hoverable
                    p.
                        Тип поля для ввода значения параметра, которое используется в Counter settings.
                        Поля могут быть следующих типов:

                    ol
                        li Standard text input - поле ввода размером в 1/3 ширины формы
                        li Middle text input - поле ввода размером в 2/3 ширины формы
                        li Long text inpu - поле ввода размером в ширину формы
                        li Checkbox - Элемент типа checkbox
                        li Text area - Многострочное поле ввода размером в ширину формы
                        li Javascript editor - Поле для ввода кода на языке JavaScript

                    h3 Collector code
                    p.
                        Вкладка содержит редактор JavaScript, в котором можно разработать новый или внести изменение в
                        существующий код сборщика.
                    img(src="./images/help.collectorCode.png" width="1024").materialboxed.card-panel.hoverable
                    h3 Формирования файла помощи во вкладке HELP PAGE
                        img(src="./images/help.helpSetup.png" width="1024").materialboxed.card-panel.hoverable

                        h4 Help page language
                        p.
                            Можно выбрать страницу помощи для требуемого языка. При выборе нового языка,
                            все текущие изменения, сделанные на странице помощи, не сохраняются.
                            Если страницы помощи не существовало, в этом поле будет установлен
                            язык, используемый в браузере по умолчанию. Если существует страница помощи с языком,
                            используемым в браузере по умолчанию, она будет отображена в первую очередь.
                            Иначе отображается страница помощи на английском языке.
                            Если страницы помощи на языке, установленном в браузере и страницы помощи на английском языке
                            не существует, будет отображена первая попавшаяся страница помощи.

                        h4 Add new language
                        p.
                            Если в это поле добавить новый язык и нажать на кнопку "+", он будет добавлен в список языков.
                            Help page language. Затем можно создать страницу помощи на добавленном языке.

                    h2 Разработка нового сборщика
                    div.row
                        div.col.s12.m6.l7
                            p.
                                Сборщик состоит из нескольких стандартных компонент:
                            ul.browser-default
                                li config.json - файл с настройками сборщика
                                li collector.js - исполняемый код сборщика
                                li help\index.ru.pug - статическая страница помощи с описанием сборщика
                            p.
                                В Collector editor созданы готовые шаблоны, используя которые
                                можно быстро разработать собственный сборщик.
                        div.col.s12.m6.l5
                            img(src="./images/help.files.png").materialboxed.card-panel.hoverable
                    h4 Подключение дополнительных модулей nodejs
                    p.
                        Если требуется подключить внешний модуль nodejs, необходимо установить его в каталог
                        node_modules, который должен находится в корневом каталоге разрабатываемой компоненты.
                        Для этого можно воспользоваться утилитой npm и в корневом каталоге компоненты выполнить
                        следующие шаги:
                    ul.browser-default
                        li создать файл package.json вручную либо запустить npm init и ответить на вопросы.
                        li.
                            выполнить nmp i <имя модуля>. Появится каталог node_modules в который будет установлен
                            требуемый модуль
                    h4 Пассивные сборщики
                    p.
                        Пассивные сборщики интегрируются в код сервера (если не установлен параметр
                        "Separate collector"). Обычно счетчик, использующий пассивный сборщик, зависит от других
                        счетчиков и начинает собирать данные на основе этих зависимостей, например по сигналу
                        от счетчика, созданного на основе активного сборщика "timer". Простым примером пассивного
                        счетчика является "constant" , который передает значение своего параметра серверу.
                    h4 Активные сборщики
                    p.
                        Активные сборщики запускаются как выделенный процесс на старте системы.
                        Запуск и работу сборщика в выделенном
                        процессе, получение параметров и отправку данных на сервер обеспечивает система.
                        Разработчику необходимо только реализовать функцию, принимающую параметры сборщика и
                        собирающую или генерирующую данные и вызывающую функцию callback для передачи данных на сервер.
                        Чаще всего счетчик, использующий
                        активный сборщик, не зависит от других счетчиков, инициализируется при старте системы и
                        инициирует сбор данных автоматически по своему алгоритму, периодически вызывая функцию
                        callback для передачи собранных данных серверу.
                        Простым примером активного сборщика является
                        "timer", который запускается и генерирует сигналы в определенное параметрами счетчика время.

                    h4 config.json - файл с настройками сборщика
                    p.
                        Файл с настройками для сборщика создается автоматически действием Collector editor на основе
                        введенных разработчиком параметров. Создавать такой файл вручную не требуется.
                        Ниже описаны параметры, используемые в файле:
                    ul.browser-default
                        li name - имя сборщика, используется в различных элементах интерфейса для выбора сборщика
                        li description - описание предназначения сборщика
                        li active - ("on" или "") является ли сборщик активным
                        li.
                            separate - ("on" или "") можно ли до окончания обработки данных сервером получать от сборщика
                            еще данные каждой связки объект-счетчик
                        li.
                            runCollectorSeparately - ("on" или "") нужно ли запускать пассивный сборщик в выделенном
                            процессе. Это может потребоваться, если сборщик использует структуры данных, в которых
                            хранит свои состояния от предыдущих запусков.
                            В случае, если он интегрируется в дочерние процессы сервера,
                            связи между каждым из процессом не будет и структуры данных для каждого процесса для
                            сборщика будут отдельными.
                            Например, event-generator хранит события, которые произошли в системе и их параметры,
                            а так же кэш данных, для ускорения работы с базой данных.
                        li.
                            parameters - объект, состоящий из объектов - названий параметров для сборщика, каждый из
                            которых содержит следующие настройки:
                        ul.browser-default
                            li description - описание параметра
                            li checkAs - тип проверки введенных данных
                            li default - значение по умолчанию для параметра
                            li type - тип элемента в интерфейсе Counter editor для ввода данных параметра
                            li canBeEmpty - ("on" или "") - может ли значение параметра быть пустым

                    p Пример файла с настройками для сборщика "Constant".
                    div.card-panel
                        pre.
                            {
                                "name": "Constant",
                                "description": "The collector is used to return a predefined value in the collector",
                                "active": "",
                                "separate": "",
                                "runCollectorSeparately": "",
                                "parameters": {
                                    "constant": {
                                        "description": "This value will be returned by the collector.",
                                        "canBeEmpty": "on",
                                        "type": "textInputLong"
                                    }
                                }
                            }
                    h4 collector.js - исполняемый код сборщика
                    h5 function get(param, callback)
                    p.
                        Для все типов сборщиков эта функция является обязательной.
                        Она вызывается, если системе требуется собрать данные для счетчика, основанного на
                        данном сборщике и объекте, привязанного к счетчику.
                    ul.browser-default
                        li.
                            param - это объект, состоящий и объектов параметр-значение, которые
                            передаются сборщику от счетчика. Например для сборщика "Constant" это будет
                            {constant: &lt;Значение параметра&gt;}. Некоторые параметры передаются в сборщик
                            системой:
                        ul.browser-default
                            li $id - идентификатор связанных объекта и счетчика
                            li $counterID - идентификатор счетчика, который использует этот сборщик
                            li $objectID - идентификатор объекта, который связан со счетчиком
                            li.
                                $parentID - родительский идентификатор связанных объекта и счетчика, если счетчик
                                зависит от другого счетчика и запустился по событию, сгенерированному в родительском
                                счетчике
                            li.
                                $variables - объект содержит все переменные и их значения, вычисленные во всех
                                родительских счетчиках. Формат объекта:
                                {&lt;Имя переменной1&gt;: &lt;Значение переменной1&gt;,
                                &lt;Имя переменной2&gt;: &lt;Значение переменной2&gt;}
                        li.
                            callback(err, result) - функция, которая вызывается для отправки собранных или
                            сгенерированных сборщиком данных на сервер.
                        ul.browser-default
                            li err - null или объект с ошибкой, например new Error('Error text')
                            li.
                                result - результат в виде каких-то данных (время сбора данных генерируется
                                сервером при получении данных от сборщика) или объект в формате
                                {value: &lt;value&gt; timestamp: &lt;timestamp&gt;}
                            ul.browser-default
                                li &lt;value&gt; - данные, собранные или сгенерированные сброщиком
                                li.
                                    &lt;timestamp&gt; - время в миллисекундах с 1.1.1970 для создания корректной
                                    метки времени сбора данных сборщиком
                    h5 function removeCounters(IDs, callback)
                    p.
                        Функция имеет смысл в активных сборщиках, либо в
                        пассивных сборщиках, запускаемых в выделенном процессе и хранящим свое состояние. Если
                        система удаляет из очереди по сбору данных объекты-счетчики, она вызывает эту функцию для
                        сборщика и передает ей массив идентификаторов связанных объектов и счетчиков.
                    ul.browser-default
                        li.
                            IDs - массив идентификаторов связанных объектов и счетчиков
                        li.
                            callback(err) - функция, вызываемая после окончания выполнения всех операций по очистки
                            данных. err - null или объект с ошибкой, например new Error('Error text')
                    h5 function destroy(callback)
                    p.
                        Функция имеет смысл в активных сборщиках, либо в
                        пассивных сборщиках, запускаемых в выделенном процессе и хранящим свое состояние. Если
                        система удаляет все данные связанные со сборщиком она вызовет эту функцию.
                    ul.browser-default
                        li.
                            callback(err) - функция, вызываемая после окончания выполнения всех операций по очистки
                            данных. err - null или объект с ошибкой, например new Error('Error text')
                    p.
                        Пример исполняемого кода для пассивного сборщика "Constant". Сборщик принимает параметр constant и
                        возвращает его на сервер.
                    div.card-panel
                        pre.
                            var collector = {};
                            module.exports = collector;

                            collector.get = function(prms, callback) {
                                /* insert collector code here */
                                callback(null, prms.constant);
                            };
                    p.
                        Пример исполняемого кода для активного сборщика "Timer". Сборщик принимает параметр wakeupInterval и
                        через определенный в нем интервал времени (в секундах) генерирует сигналы, возвращая текущее время
                    div.card-panel
                        pre.
                            var log = require('../../lib/log')(module);

                            var collector = {};
                            module.exports = collector;

                            var timers = {},
                                isServerRunning = false,
                                timerID;

                            collector.get = function(prms, callback) {
                                if(!prms || !prms.wakeupInterval) return callback(new Error('Parameter "wakeupInterval" is not specified'));

                                if(Number(prms.wakeupInterval) !== parseInt(prms.wakeupInterval, 10)) {
                                    return callback(new Error('Parameter "wakeupInterval" is incorrect: "' + prms.wakeupInterval + '"'));
                                }

                                if(!isServerRunning) {
                                    isServerRunning = true;
                                    timerID = setInterval(function() {
                                        var counter = Math.round(Date.now() / 1000 );
                                        for(var OCID in timers) {
                                            if(!timers.hasOwnProperty(OCID)) continue;

                                            var timer = timers[OCID];

                                            if(timer.prevCounter !== counter &&
                                                counter / timer.interval === Math.round(counter / timer.interval) ) {
                                                log.debug('Starting ', OCID, '; time interval: ', timer.interval, '; counter: ', counter);
                                                timer.prevCounter = counter;
                                                timer.callback(null, counter*1000);
                                            }
                                        }
                                    }, 333); // 1000 or less for increase accuracy
                                }

                                log.info('Adding a new timer for objectCounterID: ', prms.$id, ' with interval ', prms.wakeupInterval);
                                timers[prms.$id] = {
                                    interval: parseInt(prms.wakeupInterval, 10),
                                    callback: callback
                                };
                            };

                            collector.removeCounters = function(OCIDs, callback) {
                                if(!Object.keys(timers).length) return callback();

                                var removedOCIDs = [];
                                OCIDs.forEach(function(OCID) {
                                    if(timers[OCID] !== undefined) {
                                        removedOCIDs.push(OCID);
                                        delete timers[OCID];
                                    }
                                });
                                if(removedOCIDs.length) log.info('Complete removed timers for objectsCountersIDs: ',  removedOCIDs);
                                callback();
                            };

                            collector.destroy = function (callback) {
                                log.debug('Receiving signal for destroying collector');

                                if(timerID !== undefined) {
                                    clearInterval(timerID);
                                    timerID = undefined;
                                }

                                timers = {};
                                isServerRunning = false;

                                log.info('Complete destroyed timer counter');
                                callback();
                            };
                    h4 help\index.ru.pug - страница помощи с описанием действия
                    p.
                        Для формирования страниц помощи используется
                        #[a(href="https://pugjs.org/" target="_blank") шаблонизатор PUG ], который, используя
                        препроцессор, формирует HTML страницу.
                        Никаких специальных требований к странице помощи нет.
                        Для того, чтобы все компоненты интерфейса ALEPIZ были созданы в одном стиле, желательно
                        использовать готовый шаблон, предоставляемый Collector editor и
                        элементы фреймворка #[a(href="https://materializecss.com/" target="_blank") materializecss].
                    p.
                        Скрипт help.js, включенный в шаблон страницы помощи, автоматически сформирует оглавление документа из
                        заголовков,
                        добавит нижний колонтитул с информацией о copyright и плавающий элемент слева для перехода к
                        верхней части страницы:
                    ul.browser-default
                        li Оглавление добавляется в первый элемент на странице с классом offset-m1
                        li Нижний колонтитул будет добавлен в элемент с тегом body
                        li.
                            copyright формируется из элемента meta("author"), например
                            meta(name=&quot;author&quot; content=&quot;Alexander Belov &lt;asbel@alepiz.com&gt;&quot;)
                            добавит соответствующий copyright и ссылку для составления почтового сообщения.
                            Год формируется из document.lastModified || document.lastModifiedDate
                        li плавающий элемент слева для перехода к верхней части страницы будет добавлен в элемент с тегом main